;   TITLE Integer operation             (Exam4.asm)
;-----------------------------------------------------------------------------------------------------------
;   CIS130- Computer Organization Exam4
;   Student Name: Harshvi
;-----------------------------------------------------------------------------------------------------------
; 	This program will use an array in memory. you are asked to implements several procedures in assembly language to work
;   with these numbers to produce the result as specified in the requirements for the particular procedures and
;   displays the results to user
;
;   Grading Policy:
;
;	Use the correct registers for in your program		10 points
;	Use the correct movement statements				    10 points
;	Use the correct addition statements				    10 points
;	Use the correct multiplication statements			10 points
;	Use the correct label and loop statements			10 points
;	Use the correct comparison and jump statements	    10 points
;	Your program correct compile and run				10 points
;	You have the correct results					    10 points
;	Good comments									    10 points
;   Pseudocode conversions                              10 points

; 	TO DO:
; 	Write code to implement the requirements for procedures : ArrayMultiplicationDivision
;   Write code to implement the requirements for procedures : ArrayAverage
; 	Write code to implement the requirements for procedure: ArraySumEven 
;   You also need to translate these three method to pseudocode, java, or C++ code 
;   Make sure you can compile and run your code. 
;   You have to document your code with comments. 
;-----------------------------------------------------------------------------------------------------------
.386
.model flat,stdcall
.stack 4096

    INTEGER_COUNT = 6

.data
    array DWORD  99, 75, 5, 2, 3, 6
    divider DWORD 2
    ExitProcess proto,dwExitCode:dword

.code 

;-----------------------------------------------------------------------------------------------------------
main PROC
    mov    esi,OFFSET array
    mov    ecx,INTEGER_COUNT
    call   ArraySum

    call   ArrayMultiplicationDivision

    call   ArrayAverage

    call   ArraySumEven
	invoke ExitProcess,0
main ENDP

;-----------------------------------------------------------------------------------------------------------
ArraySum PROC USES esi ecx
;
; Calculates the sum of an array of 32-bit integers.
;
; Receives: ESI points to the array, ECX = array size
; Returns:  EAX = sum of the array elements
;-----------------------------------------------------------------------------------------------------------
    mov  eax,0                     ; Set sum to zero
L1: add eax,[esi]                  ; Add each integer to sum
    add esi,TYPE DWORD             ; Move to next integer
    loop L1                        ; Repeat for array size
    ret                            ; Sum is in EAX
ArraySum ENDP

;-----------------------------------------------------------------------------------------------------------
ArrayMultiplicationDivision PROC USES esi ecx
;
; Calculate the multiplications for an array of 32-bit integers
;
; You need to implement the code in this procedure to calculate products of all the numbers in the array
;   and then divided the result by the number of elements in the array.
; For example: if user enters 1, 2, 3, 4, 5, 6.  
; The final result should be like the eax = (1 * 2 * 3 * 4 * 5 * 6)/ 6 (INTERGER_ACCOUNT, which is the number
;   of elements in the array)
; Your program should still work if you changed the INTERGER_ACOUNT 
; Please document your code with comments
;
; Receives: ESI points to the array, ECX = array size
; Returns:  EAX = result of the calculation
;-----------------------------------------------------------------------------------------------------------
    mov  eax, 1                  ; Start with product = 1
    mov  ebx, ecx                ; Copy count to EBX for division later
L2:
    mul  dword ptr [esi]         ; Multiply current element with EAX
    add  esi, TYPE DWORD         ; Move to next array element
    loop L2                      ; Repeat for all elements
    mov  edx, 0                  ; Clear EDX before division
    div  ebx                     ; Divide EAX by EBX
    ret
ArrayMultiplicationDivision ENDP

;-----------------------------------------------------------------------------------------------------------
; Provide the corresponding pseudocode, Java, or c++ equivalent to implement the same calculations. 
; NOTE: this pseudo code will not be compiled by the assembler, but to use it as documentation 
; and showing your understanding between assembly language and high level computer language. 
; Your high language pseudo code should be this in this comments section.
;-----------------------------------------------------------------------------------------------------------
;-- Your pseudocode for ArrayMultiplicationDivision procedure ----------------------------------------------
; int product = 1;
; for (int i = 0; i < array.length; i++) {
;     product = product * array[i];
; }
; product = product / array.length;
;-----------------------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------------------
ArrayAverage PROC USES esi ecx
;
; Calculate the average for an array of 32-bit integers
;
; You need to implement the code in this procedure to calculate avarge of the array entered by the user
; For example: if user enters 1, 2, 3, 4, 5, 6  
; The final result should be = (1 + 2 +3 + 4 + 5 + 6) / 6
; Your program should still work if you changed the INTERGER_ACOUNT 
; Please document your steps
;
; Receives: ESI points to the array, ECX = array size
; Returns:  EAX = result of the calculation
;-----------------------------------------------------------------------------------------------------------
    mov  eax, 0                  ; Start sum at 0
    mov  ebx, ecx                ; Save count for division later
L3:
    add  eax, [esi]              ; Add array element to sum
    add  esi, TYPE DWORD         ; Move to next array element
    loop L3                      ; Repeat until ECX = 0
    mov  edx, 0                  ; Clear EDX before division
    div  ebx                     ; Divide sum by count
    ret
ArrayAverage ENDP

;-----------------------------------------------------------------------------------------------------------
; Provide the corresponding pseudocode, Java, or c++ equivalent to implement the same calculations. 
; NOTE: this pseudo code will not be compiled by the assembler, but to use it as documentation 
; and showing your understanding between assembly language and high level computer language. 
; Your high language pseudo code should be this in this comments section.
;-----------------------------------------------------------------------------------------------------------
;-- Your pseudocode for ArrayAverage procedure -------------------------------------------------------------
; int sum = 0;
; for (int i = 0; i < array.length; i++) {
;     sum = sum + array[i];
; }
; int average = sum / array.length;
;-----------------------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------------------
ArraySumEven PROC USES esi ecx
;
; Calculate the sum of the array, only summarize the even numbers
;
; You need to implement the code in this procedure to add up only the even numbers in this array
; For example, if user enter number 3, 5, 6, 2, 11, 10, the result = 6 + 2 + 10, ignore 3, 5, and 11
; Your program should still work if you changed the INTERGER_ACOUNT 
; Please document your steps
;
; Receives: ESI points to the array, ECX = array size
; Returns:  EAX = result of the calculation
;-----------------------------------------------------------------------------------------------------------
    mov  eax, 0                  ; Initialize sum to 0
L4:
    mov  ebx, [esi]              ; Load current element into EBX
    test bl, 1                   ; Check if number is odd (low bit = 1)
    jnz  SkipAdd                 ; If odd, skip
    add  eax, ebx                ; If even, add to sum
SkipAdd:
    add  esi, TYPE DWORD         ; Move to next array element
    loop L4                      ; Repeat for all elements
    ret
ArraySumEven ENDP

;-----------------------------------------------------------------------------------------------------------
; Provide the corresponding pseudocode, Java, or c++ equivalent to implement the same calculations. 
; NOTE: this pseudo code will not be compiled by the assembler, but to use it as documentation 
; and showing your understanding between assembly language and high level computer language. 
; Your high language pseudo code should be this in this comments section.
;-----------------------------------------------------------------------------------------------------------
;-- Your pseudocode for ArraySumEven procedure -------------------------------------------------------------
; int sum = 0;
; for (int i = 0; i < array.length; i++) {
;     if (array[i] % 2 == 0) {
;         sum = sum + array[i];
;     }
; }
;-----------------------------------------------------------------------------------------------------------

END main
