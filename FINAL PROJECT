;   TITLE Integer operation             (Exam4.asm)
;-----------------------------------------------------------------------------------------------------------
;   CIS130- Computer Organization Exam4
;   Student Name: Harshvi Patel
;-----------------------------------------------------------------------------------------------------------
; 	This program will use an array in memory. you are asked to implements several procedures in assembly language to work
;   with these numbers to produce the result as specified in the requirements for the particular procedures and
;   displays the results to user
;
;   Grading Policy:
;
;	Use the correct registers for in your program   10 points
;	Use the correct movement statements	        10 points
;	Use the correct addition statements	        10 points
;	Use the correct multiplication statements	10 points
;	Use the correct label and loop statements       10 points
;	Use the correct comparison and jump statements	10 points
;	Your program correct compile and run		10 points
;	You have the correct results		        10 points
;	Good comments   				10 points
;   Pseudocode conversions                              10 points

; 	TO DO:
; 	Write code to implement the requirements for procedures : ArrayMultiplicationDivision
;   Write code to implement the requirements for procedures : ArrayAverage
; 	Write code to implement the requirements for procedure: ArraySumEven 
;   You also need to translate these three method to pseudocode, java, or C++ code 
;   Make sure you can compile and run your code. 
;   You have to document your code with comments. 
;-----------------------------------------------------------------------------------------------------------
.386
.model flat,stdcall
.stack 4096

    INTEGER_COUNT = 6

.data
    array DWORD  99, 75, 5, 2, 3, 6
    divider DWORD 2
    ExitProcess proto,dwExitCode:dword

.code 

;-----------------------------------------------------------------------------------------------------------
main PROC
    mov    esi,OFFSET array
    mov    ecx,INTEGER_COUNT
    call   ArraySum

    call   ArrayMultiplicationDivision

    call   ArrayAverage

    call   ArraySumEven
	invoke ExitProcess,0
main ENDP

;-----------------------------------------------------------------------------------------------------------
ArraySum PROC USES esi ecx
;
; Calculates the sum of an array of 32-bit integers.
;
; Receives: ESI points to the array, ECX = array size
; Returns:  EAX = sum of the array elements
;-----------------------------------------------------------------------------------------------------------
    mov  eax,0                     ; Set sum to zero
L1: add eax,[esi]                  ; Add each integer to sum
    add esi,TYPE DWORD             ; Move to next integer
    loop L1                        ; Repeat for array size
    ret                            ; Sum is in EAX
ArraySum ENDP

;-----------------------------------------------------------------------------------------------------------
ArrayMultiplicationDivision PROC USES esi ecx
;
; Calculate the product of array elements and divide by count.
;
; Receives: ESI points to array, ECX = array size
; Returns: EAX = (product of elements) / INTEGER_COUNT
;-----------------------------------------------------------------------------------------------------------
    mov eax,1                      ; Start with product = 1
    mov ebx,ecx                    ; Save count in EBX
L2: 
    mul dword ptr [esi]            ; Multiply EAX by [ESI]
    add esi, TYPE DWORD            ; Move to next element
    loop L2                        ; Repeat for all elements

    mov edx,0                      ; Clear EDX before division
    div ebx                        ; Divide EAX by EBX (INTEGER_COUNT)
    ret
ArrayMultiplicationDivision ENDP

;-----------------------------------------------------------------------------------------------------------
; Pseudocode for ArrayMultiplicationDivision procedure ----------------------------------------------
; int product = 1;
; for (int i = 0; i < array.length; i++) {
;     product = product * array[i];
; }
; product = product / array.length;
;-----------------------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------------------
ArrayAverage PROC USES esi ecx
;
; Calculate the average for an array of 32-bit integers.
;
; Receives: ESI points to array, ECX = array size
; Returns: EAX = average
;-----------------------------------------------------------------------------------------------------------
    mov eax,0                     ; Start sum at 0
    mov ebx,ecx                   ; Save count in EBX
L3: 
    add eax, [esi]                 ; Add element to sum
    add esi, TYPE DWORD            ; Move to next element
    loop L3                        ; Repeat for all elements

    mov edx,0                      ; Clear EDX before division
    div ebx                        ; Divide sum by INTEGER_COUNT to get average
    ret
ArrayAverage ENDP

;-----------------------------------------------------------------------------------------------------------
; Pseudocode for ArrayAverage procedure -------------------------------------------------------------
; int sum = 0;
; for (int i = 0; i < array.length; i++) {
;     sum = sum + array[i];
; }
; int average = sum / array.length;
;-----------------------------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------------------------
ArraySumEven PROC USES esi ecx
;
; Calculate the sum of only the even numbers in the array.
;
; Receives: ESI points to array, ECX = array size
; Returns: EAX = sum of even elements
;-----------------------------------------------------------------------------------------------------------
    mov eax,0                     ; Start sum at 0
L4: 
    mov ebx, [esi]                 ; Load current element into EBX
    test bl,1                      ; Check if number is odd (lowest bit = 1)
    jnz SkipAdd                    ; If odd, skip this number

    add eax, ebx                   ; If even, add it to the sum

SkipAdd:
    add esi, TYPE DWORD            ; Move to next element
    loop L4                        ; Repeat for all elements
    ret
ArraySumEven ENDP

;-----------------------------------------------------------------------------------------------------------
; Pseudocode for ArraySumEven procedure -------------------------------------------------------------
; int sum = 0;
; for (int i = 0; i < array.length; i++) {
;     if (array[i] % 2 == 0) {
;         sum = sum + array[i];
;     }
; }
;-----------------------------------------------------------------------------------------------------------

END main
